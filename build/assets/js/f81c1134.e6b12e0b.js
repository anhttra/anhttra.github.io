"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[130],{7735:e=>{e.exports=JSON.parse('{"archive":{"blogPosts":[{"id":"conda-and-poetry-are-all-you-need","metadata":{"permalink":"/blog/conda-and-poetry-are-all-you-need","source":"@site/blog/2024-05-12-conda-and-poetry-are-all-you-need/index.md","title":"Conda + Poetry = All You Need","description":"Poetry Typography","date":"2024-05-12T00:00:00.000Z","tags":[{"inline":false,"label":"Poetry","permalink":"/blog/tags/poetry","description":"Poetry tag description"},{"inline":false,"label":"Conda","permalink":"/blog/tags/conda","description":"Conda tag description"},{"inline":false,"label":"Python","permalink":"/blog/tags/python","description":"Python tag description"}],"readingTime":0.86,"hasTruncateMarker":true,"authors":[{"name":"Anh T. Tra","title":"Full-stack AI Engineer","url":"https://github.com/anhttra","page":{"permalink":"/blog/authors/anhttra"},"socials":{"linkedin":"https://www.linkedin.com/in/anhttra/","github":"https://github.com/anhttra","newsletter":"https://anhttra.tensormaze.com"},"imageURL":"https://avatars.githubusercontent.com/u/44150844?v=4","key":"anhttra"}],"frontMatter":{"slug":"conda-and-poetry-are-all-you-need","title":"Conda + Poetry = All You Need","authors":["anhttra"],"tags":["poetry","conda","python"]},"unlisted":false,"nextItem":{"title":"Revisiting the easy-lb-proxy","permalink":"/blog/revisiting-the-easy-lb-proxy"}},"content":"![Poetry Typography](./banner.png)\\n\\n`Poetry` is being used more and more in Python project as a very convenient tool for managing dependencies. Since conda is a great tool for handling virtual environment, the combination between `conda` and `poetry` help Python projects well-organized and perfectly isolated.\\n\\n\x3c!-- truncate --\x3e\\n\\n## Project Initialization Using `conda` and `poetry`\\n\\nInstall `conda/miniconda`\\n\\n- https://conda.io/projects/conda/en/latest/user-guide/install/macos.html\\n\\nCreate a new `conda` environment\\n\\n```bash\\nconda create -n <name-of-env>\\nconda activate <name-of-env>\\n(name-of-env) conda install python=<python-version>\\n```\\n\\nInstall `poetry`\\n\\n```bash\\n(name-of-env) pip install poetry\\n```\\n\\nor using `conda`\\n\\n```bash\\n(name-of-env) conda install poetry\\n```\\n\\nInitialize project\\n\\n```bash\\n(name-of-env) mkdir <project-name>\\n(name-of-env) cd <project-name>\\n(name-of-env) poetry init\\n```\\n\\n**Note:** If you got this error `ModuleNotFoundError: No module named \'chardet\'`, you should install the `charset` library as below before reinitializing your project. This error may happen when installing `poetry` using `conda`.\\n\\n```bash\\nconda install -c conda-forge charset-normalizer\\n```\\n\\n## Other Tips with `conda`\\n\\n- Install node in conda:\\n\\n```bash\\n conda install -c conda-forge nodejs\\n```\\n\\n- Autocompletion in zsh: https://github.com/conda-incubator/conda-zsh-completion\\n\\n## References\\n\\n- https://medium.com/@silvinohenriqueteixeiramalta/conda-and-poetry-a-harmonious-fusion-8116895b6380\\n- https://michhar.github.io/2023-07-poetry-with-conda/"},{"id":"revisiting-the-easy-lb-proxy","metadata":{"permalink":"/blog/revisiting-the-easy-lb-proxy","source":"@site/blog/2023-10-12-revisiting-the-easy-lb-proxy/index.md","title":"Revisiting the easy-lb-proxy","description":"HAProxy Stats Page","date":"2023-10-12T00:00:00.000Z","tags":[{"inline":false,"label":"haproxy","permalink":"/blog/tags/haproxy","description":"Haproxy tag description"},{"inline":false,"label":"confd","permalink":"/blog/tags/confd","description":"Confd tag description"},{"inline":false,"label":"LB","permalink":"/blog/tags/lb","description":"LB tag description"}],"readingTime":4.06,"hasTruncateMarker":true,"authors":[{"name":"Anh T. Tra","title":"Full-stack AI Engineer","url":"https://github.com/anhttra","page":{"permalink":"/blog/authors/anhttra"},"socials":{"linkedin":"https://www.linkedin.com/in/anhttra/","github":"https://github.com/anhttra","newsletter":"https://anhttra.tensormaze.com"},"imageURL":"https://avatars.githubusercontent.com/u/44150844?v=4","key":"anhttra"}],"frontMatter":{"slug":"revisiting-the-easy-lb-proxy","title":"Revisiting the easy-lb-proxy","authors":["anhttra"],"tags":["haproxy","confd","lb"]},"unlisted":false,"prevItem":{"title":"Conda + Poetry = All You Need","permalink":"/blog/conda-and-poetry-are-all-you-need"}},"content":"![HAProxy Stats Page](./banner.png)\\n\\nThe `easy-lb-proxy` was a nice open source given by [Miguel Grinberg](https://blog.miguelgrinberg.com/post/about-me) to provide a simple way to deploy `haproxy`, `confd` using Docker. It was also used in the `micro_flack` demo presented by Miguel at PyCon 2017 on May 17th, 2017. However, it is 6 years since last commit was pushed to the [source-code repository](https://github.com/miguelgrinberg/easy-lb-haproxy). Thus, some modifications are required if we want to apply the source-code with modern hardwares (e.g. ARM architecture) and softwares (latest `haproxy` and confd). This post will discuss how to develop a Docker image installing latest `haproxy` and `confd` versions with ability run with new MacBook (M1/M2 CPUs).\\n\\n\x3c!-- truncate --\x3e\\n\\n## What `easy-lb-haproxy` is?\\n\\n> Accoriding the the `easy-lb-haproxy` README, it is a repository that defines a load balancer container for Docker, based on `haproxy`, `confd` and `etcd`.\\n\\nThe `haproxy` load balancer will be gracefully reload when its configuration is changes by `confd`, which pulls configuration data from a `ectd` node/cluster.\\n\\nIn `easy-lb-haproxy` repository, `haproxy` is the version 1.7 (for alpine) while `confd` is binary file for running on `amd64/alpine` environment as shown in the Dockerfile below:\\n\\n```Dockerfile\\nFROM haproxy:1.7-alpine\\nRUN apk add --update curl && rm -rf /var/cache/apk/*\\nRUN mkdir -p /etc/confd/conf.d\\nRUN mkdir -p /etc/confd/templates\\nCOPY confd .\\nRUN chmod +x confd\\nCOPY haproxy.toml /etc/confd/conf.d/\\nCOPY haproxy.tmpl /etc/confd/templates/\\nCOPY boot.sh .\\nCOPY watcher.sh .\\nEXPOSE 80\\nCMD [\\"./boot.sh\\"]\\n```\\n\\n## Why `easy-lb-haproxy` Need Being Revisited?\\n\\nAt the time writing this post, when running the image of `easy-lb-haproxy` (miguelgrinberg/easy-lb-haproxy) on Macbook M1, we will got this warning:\\n\\n```bash\\n(base) ~ % docker run -d miguelgrinberg/easy-etcd\\n\\nUnable to find image \'miguelgrinberg/easy-etcd:latest\' locally\\nlatest: Pulling from miguelgrinberg/easy-etcd\\n627beaf3eaaf: Already exists\\n9407f1b3f535: Pull complete\\nf45e820e1b24: Pull complete\\n1da0226fd80a: Pull complete\\ne71e952e8745: Pull complete\\nda4180eebdd1: Pull complete\\nDigest: sha256:b46545c321667c591f78e6f91b4c856c25350cb27e51c5f6304e43a6e9881416\\nStatus: Downloaded newer image for miguelgrinberg/easy-etcd:latest\\nWARNING: The requested image\'s platform (linux/amd64) does not match the\\ndetected host platform (linux/arm64/v8) and no specific platform was requested\\n```\\n\\nWhen logging out the docker container, we will see this error:\\n\\n```bash\\n(base) ~ % docker ps\\nCONTAINER ID   IMAGE                            COMMAND\\n3241869758a2   miguelgrinberg/easy-lb-haproxy   \\"/docker-entrypoint.\u2026\\"\\n(base) ~ % docker logs 3241869758a2\\nruntime: failed to create new OS thread (have 2 already; errno=22)\\nfatal error: runtime.newosproc\\n```\\n\\nThis problem can also be faced when running the image on other ARM hardware, e.g. Raspberry Pi. It needs to make some modifications to make it run on these hardwares.\\n\\n## How to Modify `easy-lb-haproxy` Docker Image?\\n\\nIn order to modify `easy-lb-haproxy` to run on new hardwares and softwares, we need to: 1. change base Docker Image, 2. rebuild `confd` , and 3. rebuild `easy-lb-haproxy`.\\n\\n### Step 1: Use New Docker Image\\n\\nSince the original `easy-lb-haproxy` used base image of `haproxy:1.7-alpine`, we will choose to use the newest official haproxy docker images on `alpine`, which is `haproxy:alpine3.18` . We also need another docker image with `golang` installed to build confd, so we choose the official golang image with the same `alpine3.18` , which is `1.20.10-alpine3.18`.\\n\\n### Step 2: Rebuild `confd`\\n\\nYou can follow the instruction at https://github.com/kelseyhightower/confd for building `confd` from source code. To build it with `alpine` docker, just run:\\n\\n```bash\\n(base) ~ % docker run -it golang:1.20.10-alpine3.18 sh\\n/go # apk update && apk add git make\\n/go # mkdir -p $GOPATH/src/github.com/kelseyhightower\\n/go # git clone https://github.com/kelseyhightower/confd.git \\\\\\n$GOPATH/src/github.com/kelseyhightower/confd\\n/go # cd $GOPATH/src/github.com/kelseyhightower/confd\\n/go/src/github.com/kelseyhightower/confd # make\\n/go/src/github.com/kelseyhightower/confd # ls bin\\nconfd\\n```\\n\\n### Step 3: Rebuild easy-lb-proxy\\n\\nWe will follow the [Dockerfile](https://github.com/anhttra/revisiting-easy-lb-haproxy/blob/master/Dockerfile) in the repo to build our new `easy-lb-proxy` image, except that we will use the base image in the step 1 and the latest `confd` obtained in step 2. The new Dockerfile will be:\\n\\n```Dockerfile\\nFROM golang:1.20.10-alpine3.18 as build\\nRUN apk add --update git make\\nRUN mkdir -p $GOPATH/src/github.com/kelseyhightower && \\\\\\n    git clone https://github.com/kelseyhightower/confd.git \\\\\\n    $GOPATH/src/github.com/kelseyhightower/confd && \\\\\\n    cd $GOPATH/src/github.com/kelseyhightower/confd && \\\\\\n    make\\n\\nFROM haproxy:alpine3.18\\nUSER root\\nRUN apk update && apk add curl && rm -rf /var/cache/apk/*\\nRUN mkdir -p /etc/confd/conf.d\\nRUN mkdir -p /etc/confd/templates\\nCOPY --from=build /go/src/github.com/kelseyhightower/confd/bin/confd .\\nRUN chmod +x confd\\nCOPY haproxy.toml /etc/confd/conf.d/\\nCOPY haproxy.tmpl /etc/confd/templates/\\nCOPY boot.sh .\\nCOPY watcher.sh .\\nEXPOSE 80\\nCMD [\\"./boot.sh\\"]\\n```\\n\\nThen we can run the new Docker image without the error as `runtime: failed to create new OS thread (have 2 already; errno=22)`.\\n\\n```bash\\n(base) % docker build -t revisit-easy-lb-haproxy .\\n(base) % docker run -it revisit-easy-lb-haproxy\\n2023-10-13T13:42:04Z b491152c349a ./confd[9]: INFO Backend set to etcd\\n2023-10-13T13:42:04Z b491152c349a ./confd[9]: INFO Starting confd\\n```\\n\\n## Conclusion & Future Works\\n\\nIn this post, we show how to modify the `easy-lb-haproxy` source code to achieve the new Docker image, which is able to run on new hardware with new softwares. However, the current confd template files (`haproxy.tmpl` and `haproxy.toml`) do not work correctly by some reasons (API updates of `etcd`, changes of `confd` template syntax, and changes in the way `haproxy` is reload). We will cover the fix for these issues in the next post."}]}}')}}]);